#user

#action
action.create=\
  WITH data(name, description, type, key) AS (\
  VALUES(:name, :description, :type, :key)),\
  key_insert AS (\
  INSERT INTO parameter_key(key)\
  SELECT key FROM data\
  ON CONFLICT DO NOTHING\
  RETURNING key AS key_id)\
  INSERT INTO action(name, description, type, key_id)\
  SELECT name, description, type, key_id\
  FROM data\
  JOIN key_insert USING(key);

action.findAll=\
  SELECT id, name, description, type, key_id FROM action LIMIT :size OFFSET :number;

action.findById=\
  SELECT id, name, description, type, key_id FROM action\
  WHERE id=:id;

action.edit=\
  UPDATE action SET(name, description, type, key_id)\
  =(:name, :description, :type, :key_id)\
  WHERE id=:id;

action.deleteById=\
  DELETE FROM action \
  WHERE id=:id;

action.findByKey=\
  SELECT a.name, a.description, a.type, a.key_id\
  FROM action AS a \
  JOIN parameter_key AS p ON a.key_id = p.id \
  WHERE p.key LIKE '%'||:key||'%';

#compound
compound.create=\
    WITH act AS ( \
    INSERT INTO action (name, description, type) \
    VALUES (?, ?, 'Compound') \
    RETURNING action_id AS comp_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT unnest(?::integer[]), comp_id, unnest(?::integer[]), unnest(?::integer[]) FROM act;

#compound.getNumberOfCompounds=\
#    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

compound.getNumberOfCompounds=\
    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE lower(name) LIKE lower(concat('%',?::varchar,'%')) \
    AND lower(description) LIKE lower(concat('%',?::varchar,'%'));

compound.findAll=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

#compound.findByPage=\
#    SELECT DISTINCT action.action_id, name, description FROM \
#    action INNER JOIN compound_action ON action.action_id = compound_action.compound_id \
#    WHERE name LIKE concat('%',?::varchar,'%') AND description LIKE concat('%',?::varchar,'%') ORDER BY ? LIMIT ? OFFSET ?;

compound.findById=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE action.action_id = ?;

compound.edit=\
    UPDATE action SET name = ?, description = ? WHERE action_id = ?;

compound.deleteById=\
    DELETE FROM action WHERE action_id = ?;

compound.findCompoundActions=\
    SELECT action.action_id, name, description, order_num, type, parameter_key.parameter_key_id pk_id, key \
    FROM action JOIN compound_action ON action.action_id = compound_action.action_id \
    left outer join parameter_key \
    ON (CASE WHEN compound_action.parameter_key_id isnull THEN action.parameter_key_id ELSE compound_action.parameter_key_id END) = parameter_key.parameter_key_id \
    WHERE compound_id = ?;


compound.addActionToCompound=\
    WITH pk AS ( \
    INSERT INTO parameter_key (key) \
    VALUES (?) \
    RETURNING parameter_key_id AS pk_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT ?, ?, ?, pk_id from pk;

compound.addActionWithKeyNull=\
    INSERT INTO compound_action (parameter_key_id, action_id, compound_id, order_num) VALUES (?,?,?,?);

#Break up compound into actions
#compound.addActionToCompound=\
#    INSERT INTO compound_action (action_id, compound_id, order_num)
#    (SELECT DISTINCT action.action_id, ? compound_id, 0 order_num, action.parameter_key_id FROM action \
#    left outer join compound_action ON action.action_id = compound_action.action_id \
#    WHERE (CASE WHEN compound_id = ? THEN compound_id = ? ELSE (action.action_id = ? AND type != 'Compound') END));

compound.deleteActionFromCompound=\
  DELETE FROM compound_action where action_id = ? AND compound_id = ?

compound.changeOrder=\
  UPDATE compound_action SET action_id = (?::integer[])[order_num] \
  WHERE compound_id = ?;
