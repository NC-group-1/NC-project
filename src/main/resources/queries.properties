#user
user.create=\
  INSERT INTO usr (email, role) \
  VALUES (?,?);

user.getUserIdByEmail=\
  SELECT user_id FROM usr WHERE email = ?;

user.updatePersonalProfileById=\
  UPDATE usr SET name = ?, surname = ?, about_me = ? \
  WHERE user_id = ?

user.findByEmail=\
  SELECT user_id, name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE email = ?

user.findUserProfileById=\
  SELECT user_id, name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE user_id = ?

user.getUserRoleByEmail=\
  SELECT role FROM usr WHERE email = ?

user.findByEmailForAuth=\
  SELECT email, pass, role, activated \
  FROM usr WHERE email = ?

user.findByEmailForRecovery=\
  SELECT user_id, email, email_code, code_expire_date \
  FROM usr WHERE email = ?

user.saveToken=\
  UPDATE usr SET email_code=?, code_expire_date=? \
  WHERE user_id=?

user.changeUserPassword=\
  UPDATE usr SET pass=? WHERE user_id=?

user.findUserIdByPasswordToken=\
  SELECT user_id FROM usr WHERE email_code = ?

user.findTokenByRecoverPasswordToken=\
  SELECT user_id, email_code, code_expire_date \
  FROM usr WHERE email_code = ?

user.getAllByPage=\
  SELECT user_id,name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE CONCAT(name, ' ', surname) LIKE ? ORDER BY %s %s LIMIT ? OFFSET ?*?

user.updateUserFromTable=\
  UPDATE usr SET name=?, surname=?, activated=?,email=? WHERE user_id=?

user.getSizeOfResultSet=\
  SELECT COUNT(*) FROM public.usr WHERE name LIKE ?

#data_set
data_set.getGeneralInfoByPage=\
  SELECT data_set_id, data_set.name, description, data_set.user_id, role, usr.name username, surname \
  FROM data_set INNER JOIN usr \
  ON data_set.user_id=usr.user_id \
  WHERE data_set.name LIKE ? \
  ORDER BY %s %s LIMIT ? OFFSET ?

data_set.getSizeOfResultSet=\
  SELECT COUNT(*) FROM data_set \
  WHERE name LIKE CONCAT('%',?,'%')

data_set.create=\
  INSERT INTO data_set (name, description, user_id) \
  VALUES (?,?,?)

data_set.edit=\
  UPDATE data_set SET name=?, description=?, user_id=? \
  WHERE data_set_id=?;

data_set.findById=\
  SELECT data_set_id, data_set.name, description, data_set.user_id, role, usr.name username, surname \
  FROM data_set INNER JOIN usr \
  ON data_set.user_id=usr.user_id \
  WHERE data_set_id=?

data_set.deleteById=\
  DELETE FROM data_set \
  WHERE data_set_id=?;

data_set.getNumberOfUsages=\
  SELECT COUNT(*) from action_inst \
  WHERE data_set_id=?

data_set.getDatasetValueByParam=\
  SELECT p.value val, p.data_set_id ds_id, name FROM parameter p JOIN data_set ds \
  ON p.data_set_id = ds.data_set_id WHERE p.data_set_id = ? AND p.parameter_key_id = ?;

#dataSet.getByIds=\
#  SELECT data_set.data_set_id AS data_set_id, data_set.name AS name,\
#   data_set.user_id AS user_id, data_set.description AS description, parameters.parameter_id AS parameter_id,\
#  parameters.key AS key, parameters.value AS value \
#  FROM data_set \
#    JOIN (\
#      SELECT parameter.data_set_id, parameter_key.key, parameter.value, parameter.parameter_id \
#      FROM parameter \
#      JOIN parameter_key \
#      ON parameter.parameter_key_id = parameter_key.parameter_key_id) AS parameters \
#    ON data_set.data_set_id = parameters.data_set_id \
#    JOIN usr ON data_set.user_id = usr.user_id \
#    WHERE data_set.data_set_id IN(%s);

#parameter
parameter.getAllByDataSetId=\
  SELECT parameter_id, parameter.parameter_key_id, key, value, data_set_id \
  FROM parameter INNER JOIN parameter_key \
  ON parameter.parameter_key_id=parameter_key.parameter_key_id \
  WHERE data_set_id=?

parameter.findById=\
  SELECT parameter_id, parameter.parameter_key_id, key, value, data_set_id \
  FROM parameter INNER JOIN parameter_key \
  ON parameter.parameter_key_id=parameter_key.parameter_key_id \
  WHERE parameter_id=?

parameter.create=\
  INSERT INTO parameter (value, parameter_key_id, data_set_id) \
  VALUES (?,?,?)

parameter.edit=\
  UPDATE parameter SET value=?, parameter_key_id=?, data_set_id=? \
  WHERE parameter_id=?;

parameter.deleteById=\
  DELETE FROM parameter \
  WHERE parameter_id=?;

parameter.getNumberOfUsages=\
  SELECT COUNT(*) from action_inst \
    INNER JOIN parameter on action_inst.parameter_key_id = parameter.parameter_key_id \
  WHERE parameter.parameter_id=? \
    AND parameter.data_set_id=action_inst.data_set_id;

#action
action.create=\
  INSERT INTO action (name, description, type, parameter_key_id) VALUES (?,?,?,?);

action.findNumberOfElements=\
  SELECT count(*) FROM action;

action.findNumberOfElementsWithFilter=\
  SELECT count(*) FROM action LEFT JOIN parameter_key \
  ON action.parameter_key_id = parameter_key.parameter_key_id \
  WHERE %s LIKE ? %s;

action.findAllByPage=\
  SELECT action_id, name, description, type, key, action.parameter_key_id \
  FROM action LEFT JOIN parameter_key \
  ON action.parameter_key_id = parameter_key.parameter_key_id \
  ORDER BY name LIMIT ? OFFSET ?;

action.findAllByPageWithoutTarget=\
  SELECT action_id, name, description, type, key, action.parameter_key_id \
  FROM action LEFT JOIN parameter_key \
  ON action.parameter_key_id = parameter_key.parameter_key_id WHERE action_id != ? \
  ORDER BY name LIMIT ? OFFSET ?;

action.findAllByPageWithFilter=\
  SELECT action_id, name, description, type, key, action.parameter_key_id \
  FROM action LEFT JOIN parameter_key \
  ON action.parameter_key_id = parameter_key.parameter_key_id \
  WHERE %s LIKE ? %s\
  ORDER BY %s %s LIMIT ? OFFSET ?

action.findById=\
  SELECT action_id, name, description, type, a.parameter_key_id, key \
  FROM action a JOIN parameter_key p ON a.parameter_key_id = p.parameter_key_id \
  WHERE action_id=?;

action.edit=\
  UPDATE action SET name=?, description=?, type=?, parameter_key_id=? \
  WHERE action_id=?;

action.findByName=\
  SELECT a.name, a.description, a.type, p.key\
  FROM action AS a \
  JOIN parameter_key AS p ON a.id = p.id \
  WHERE a.name LIKE CONCAT('%',?,'%');

action.setActionDescription=\
UPDATE action SET description =:description  WHERE id=?;

action.setActionName=\
  UPDATE action SET name=:name WHERE id=?;

action.deleteById=\
  DELETE FROM action \
  WHERE id=?;

#compound
compound.create=\
    WITH act AS ( \
    INSERT INTO action (name, description, type) \
    VALUES (?, ?, 'COMPOUND') \
    RETURNING action_id AS comp_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT unnest(?::integer[]), comp_id, unnest(?::integer[]), unnest(?::integer[]) FROM act;

compound.createWithParams=\
    INSERT INTO parameter_key (key) \
    SELECT DISTINCT * FROM unnest(array_remove(?::varchar[], NULL)) AS keys \
    ON CONFLICT (key) DO UPDATE SET key = parameter_key.key; \
    WITH act AS ( \
    INSERT INTO action (name, description, type) \
    VALUES (?, ?, 'COMPOUND') \
    RETURNING action_id AS comp_id \
    ) \
    INSERT \
    INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT unnest(?::integer[]), \
    comp_id, \
    unnest(?::integer[]), \
    unnest(ARRAY(SELECT parameter_key.parameter_key_id \
    FROM parameter_key RIGHT OUTER JOIN unnest(?::varchar[]) WITH ORDINALITY AS keys(key, ordinality) ON keys.key = parameter_key.key \
    ORDER BY ordinality)) \
    FROM act;

#compound.getNumberOfCompounds=\
#    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

compound.getNumberOfCompounds=\
    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE lower(name) LIKE lower(concat('%',?::varchar,'%')) \
    AND lower(description) LIKE lower(concat('%',?::varchar,'%'));

compound.findAll=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

compound.findByPage=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id \
    WHERE lower(name) LIKE lower(concat('%%',?::varchar,'%%')) \
    AND lower(description) LIKE lower(concat('%%',?::varchar,'%%')) \
    ORDER BY %s LIMIT ? OFFSET ?;

compound.findById=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE action.action_id = ?;

compound.edit=\
    UPDATE action SET name = ?, description = ? WHERE action_id = ?;

compound.deleteById=\
    DELETE FROM action WHERE action_id = ?;

compound.findCompoundActions=\
    SELECT action.action_id, name, description, order_num, type, parameter_key.parameter_key_id pk_id, key \
    FROM action JOIN compound_action ON action.action_id = compound_action.action_id \
    left outer join parameter_key \
    ON (CASE WHEN compound_action.parameter_key_id isnull THEN action.parameter_key_id ELSE compound_action.parameter_key_id END) = parameter_key.parameter_key_id \
    WHERE compound_id = ? \
    ORDER BY order_num;

compound.addActionToCompound=\
    WITH pk AS ( \
    INSERT INTO parameter_key (key) \
    VALUES (?) \
    RETURNING parameter_key_id AS pk_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT ?, ?, ?, pk_id from pk;

compound.addActionWithKeyNull=\
    INSERT INTO compound_action (parameter_key_id, action_id, compound_id, order_num) VALUES (?,?,?,?);

#Break up compound into actions
#compound.addActionToCompound=\
#    INSERT INTO compound_action (action_id, compound_id, order_num)
#    (SELECT DISTINCT action.action_id, ? compound_id, 0 order_num, action.parameter_key_id FROM action \
#    left outer join compound_action ON action.action_id = compound_action.action_id \
#    WHERE (CASE WHEN compound_id = ? THEN compound_id = ? ELSE (action.action_id = ? AND type != 'Compound') END));

compound.deleteActionFromCompound=\
  DELETE FROM compound_action where action_id = ? AND compound_id = ?

compound.changeOrder=\
  UPDATE compound_action SET action_id = (?::integer[])[order_num] \
  WHERE compound_id = ?;

#TestCase
testCase.create=\
  INSERT INTO test_case(creator_id, starter_id, test_scenario_id, \
  name, creation_date, start_date, finish_date, status, description, recurring_time, iterations_amount)\
  VALUES(?,?,?,?,?,?,?,?,?,?,?);

testCase.getProjectLinkByTestCaseId=\
  SELECT link \
  FROM test_case \
    INNER JOIN test_scenario on test_case.test_scenario_id = test_scenario.test_scenario_id \
    INNER JOIN project on test_scenario.project_id = project.project_id \
  WHERE test_case_id=?;

testCase.findById=\
  SELECT tc.test_case_id, tc.creator_id, u.user_id, u.name username, u.surname, tc.starter_id, tc.test_scenario_id, tc.name, tc.creation_date, tc.start_date, tc.finish_date, \
    tc.status, tc.description, tc.recurring_time, tc.iterations_amount, \
    (SELECT count(*) FROM watcher WHERE watcher.test_case_id = tc.test_case_id) as watcher_numb \
  FROM test_case tc INNER JOIN usr u ON tc.creator_id=u.user_id \
  WHERE tc.test_case_id = ?;

testCase.findByName=\
  SELECT user_id, name, surname, role FROM usr \
  WHERE LOWER(CONCAT(name, ' ', surname)) LIKE CONCAT('%', LOWER(?) ,'%') \
  LIMIT 5;

testCase.addWatcher=\
  INSERT INTO watcher (user_id, test_case_id) \
  VALUES (?,?)

testCase.getListWatcherByTestCaseId=\
  SELECT u.user_id, u.name, u.surname, u.role \
  FROM usr u INNER JOIN watcher w ON u.user_id=w.user_id \
  WHERE w.test_case_id = ?

testCase.getTestCaseDetailsById=\
  SELECT test_case_id, test_case.name test_case_name, status, start_date, finish_date, creator_id, \
    creator.name creator_name, creator.surname creator_surname, starter_id, starter.name starter_name, \
    starter.surname starter_surname, project.project_id, project.name project_name, project.link, \
    (SELECT COUNT(*) FROM action_inst WHERE action_inst.test_case_id=test_case.test_case_id) number_of_actions \
  FROM test_case \
    INNER JOIN usr creator on test_case.creator_id = creator.user_id \
    LEFT JOIN usr starter on test_case.starter_id = starter.user_id \
    INNER JOIN test_scenario on test_case.test_scenario_id=test_scenario.test_scenario_id \
    INNER JOIN project on project.project_id = test_scenario.project_id \
  WHERE test_case_id = ?;

testCase.getAllByPage=\
  SELECT tc.test_case_id, tc.name, tc.description, tc.creator_id, u.user_id, u.name username, u.surname, tc.test_scenario_id, tc.finish_date,\
    tc.starter_id, tc.creation_date, tc.iterations_amount, tc.recurring_time, tc.start_date,\
    (SELECT count(*) FROM watcher w WHERE w.test_case_id = tc.test_case_id) as watcher_numb, tc.status \
  FROM test_case tc INNER JOIN usr u ON tc.creator_id=u.user_id \
    INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id \
  WHERE (tc.status IN ('READY','UNKNOWN')) AND LOWER(tc.name) \
  LIKE LOWER(?) AND ts.project_id=? ORDER BY %s %s LIMIT ? OFFSET ?*?

testCase.getHistory=\
  SELECT tc.test_case_id, tc.name, u.role, finish_date, ts.name ts_name, tc.status \
  FROM test_case tc INNER JOIN usr u ON tc.creator_id=u.user_id INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id WHERE (LOWER(tc.status) IN ('passed','failed','canceled')) AND LOWER(ts.name) \
  LIKE LOWER(?) AND ts.project_id=? ORDER BY %s %s LIMIT ? OFFSET ?*?

testCase.getTestCasesPaginatedByUserId = \
  SELECT test_case.test_case_id, test_case.name, test_case.start_date, test_case.finish_date, \
  test_case.status, projects.project_id, projects.name as project_name \
  FROM test_case \
    JOIN ( \
      SELECT test_scenario.test_scenario_id, project.project_id, project.name \
      FROM test_scenario \
      JOIN project \
      ON test_scenario.project_id = project.project_id)  AS projects \
    ON test_case.test_scenario_id = projects.test_scenario_id \
  WHERE LOWER(status) IN ('passed','failed') AND (creator_id=? OR starter_id=?) \
  ORDER BY %s %s LIMIT ? OFFSET ?;

testCase.edit=\
  UPDATE test_case \
  SET name=?, starter_id=?, iterations_amount=?, recurring_time=?, start_date=?, finish_date=?, status=? \
  WHERE test_case_id=?

testCase.editForRun=\
  UPDATE test_case SET starter_id=?, start_date=?, finish_date=?, status=? \
  WHERE test_case_id=?;

testCase.deleteById=\
  DELETE FROM test_case \
  WHERE test_case_id = ?;

testCase.getSizeOfResultSet=\
  SELECT COUNT(*) FROM test_case tc \
  INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id \
  WHERE (status IN ('READY','UNKNOWN')) AND LOWER(tc.name) LIKE LOWER(?) AND ts.project_id = ?

testCase.editTestCaseActions=\
  WITH upd AS ( \
  UPDATE test_case SET name = ?, description = ? WHERE test_case_id = ? RETURNING test_case_id \
  ) \
  UPDATE action_inst SET parameter_key_id = (?::integer[])[order_num], data_set_id = (?::integer[])[order_num] \
  WHERE test_case_id = (SELECT upd.test_case_id FROM upd) AND order_num < ?;


testCase.getSizeOfHistoryResultSet=\
  SELECT COUNT(*) FROM test_case tc \
  INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id \
  WHERE (LOWER(status) IN ('passed','failed')) AND LOWER(ts.name) LIKE LOWER(?) AND ts.project_id = ?

testCase.getCountOfTestCasesPaginatedByUserId=\
  SELECT COUNT(*) \
  FROM test_case \
    JOIN ( \
      SELECT test_scenario.test_scenario_id, project.project_id \
      FROM test_scenario \
      JOIN project ON test_scenario.project_id = project.project_id) AS projects \
    ON test_case.test_scenario_id = projects.test_scenario_id \
  WHERE LOWER(status) IN ('passed','failed') AND (creator_id=? OR starter_id=?);

testCase.getPassedAndFailedStatisticByUserId=\
  SELECT \
      (SELECT count(*) \
      FROM test_case \
      WHERE LOWER(status) = 'passed' \
      AND (creator_id = ? OR starter_id = ?)) as passed_count, \
      (SELECT count(*) \
      FROM test_case \
      WHERE LOWER(status) = 'failed' \
      AND (creator_id = ? OR starter_id = ?)) as failed_count;

#runningTestCase
runningTestCase.getAllByPage=\
  SELECT tc.test_case_id id, tc.name, tc.description, tc.creator_id, u.user_id, u.name username, u.surname, tc.starter_id, tc.start_date, \
    (SELECT count(*) FROM watcher w WHERE w.test_case_id = tc.test_case_id) as watcher_numb, tc.status \
  FROM test_case tc INNER JOIN usr u ON tc.starter_id=u.user_id \
    INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id \
  WHERE (tc.status IN ('IN_PROGRESS','STOPPED','SCHEDULED')) AND LOWER(tc.name) \
  LIKE LOWER(?) AND ts.project_id=? ORDER BY %s %s LIMIT ? OFFSET ?*?

runningTestCase.getSizeOfResultSet=\
  SELECT COUNT(*) FROM test_case tc \
  INNER JOIN test_scenario ts ON tc.test_scenario_id=ts.test_scenario_id \
  WHERE (status IN ('IN_PROGRESS','STOPPED','SCHEDULED')) AND LOWER(tc.name) LIKE LOWER(?) AND ts.project_id = ?

runningTestCase.getWatcherByTestCaseId=\
  SELECT u.user_id, u.name, u.surname, u.role \
  FROM usr u INNER JOIN watcher w ON u.user_id=w.user_id \
  WHERE w.test_case_id = ?

runningTestCase.getWatcherWithImageByTestCaseId=\
  SELECT u.user_id, u.name, u.surname, u.image_link \
  FROM usr u INNER JOIN watcher w ON u.user_id=w.user_id \
  WHERE w.test_case_id = ?

runningTestCase.edit=\
  UPDATE test_case \
  SET status=? \
  WHERE test_case_id=?

runningTestCase.findByName=\
  SELECT user_id, name, surname, role FROM usr \
  WHERE LOWER(name) LIKE CONCAT('%', LOWER(?) ,'%') \
  LIMIT 5;

runningTestCase.addWatcher=\
  INSERT INTO watcher (user_id, test_case_id) \
  VALUES (?,?)

compound.changeActions=\
  WITH del as (DELETE FROM compound_action WHERE compound_id = ?)\
  INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) SELECT unnest(?::integer[]), ?, unnest(?::integer[]), unnest(?::integer[]);

#parameterKey
parameterKey.create=\
  INSERT INTO parameter_key (key) VALUES (?) ON CONFLICT(key) DO NOTHING;

parameterKey.findById=\
  SELECT parameter_key_id, key FROM parameter_key \
  WHERE parameter_key_id = ?

parameterKey.edit=\
  UPDATE parameter_key SET key=?\
  WHERE id=?;

parameterKey.findByName=\
  SELECT parameter_key_id, key FROM parameter_key \
  WHERE parameter_key.key LIKE CONCAT('%', ? ,'%') \
  LIMIT 5;

parameterKey.deleteById=\
  DELETE FROM parameter_key \
  WHERE id=?;

#project
project.create=\
  INSERT INTO project (name, link, user_id ) \
  VALUES (?,?,?)

project.getAllByPage=\
  SELECT p.project_id, p.name, p.link, p.date, p.activated, u.user_id, u.name username, u.surname, u.email \
  FROM project p INNER JOIN usr u ON p.user_id=u.user_id \
  WHERE LOWER(p.name) LIKE LOWER(?) \
  OR LOWER(p.link) LIKE LOWER(?) \
  ORDER BY %s %s LIMIT ? OFFSET ?*?

project.edit=\
  UPDATE project \
  SET name=?, link=?, activated=? \
  WHERE project_id=?

project.getName=\
  SELECT name FROM project \
  WHERE project_id=?

project.getSizeOfResultSet=\
  SELECT COUNT(*) FROM project \
  WHERE name LIKE ?

#testScenario
testScenario.getSizeOfResultSet=\
  SELECT COUNT(*) FROM test_scenario \
  WHERE LOWER(%s) LIKE LOWER(?)

testScenario.getSizeOfProjectResultSet=\
  SELECT COUNT(*) FROM test_scenario \
  WHERE LOWER(%s) LIKE LOWER(?) AND project_id = ?

testScenario.getAllByPage=\
  SELECT t.test_scenario_id, t.name, description, t.user_id, u.name username, surname, u.email \
  FROM test_scenario t INNER JOIN usr u ON t.user_id=u.user_id \
  WHERE LOWER(%s) LIKE LOWER(?) \
  AND t.activated = true \
  ORDER BY %s %s LIMIT ? OFFSET ?*?

testScenario.getAllByPageAndProject=\
  SELECT t.test_scenario_id, t.name, description, t.user_id, u.name username, surname , u.email email \
  FROM test_scenario t INNER JOIN usr u ON t.user_id=u.user_id \
  WHERE LOWER(%s) LIKE LOWER(?) \
  AND project_id = ? \
  AND t.activated = true \
  ORDER BY %s %s LIMIT ? OFFSET ?*?

testScenario.create=\
  INSERT INTO test_scenario (name,user_id,project_id,description) \
  VALUES(?,?,?,?) RETURNING test_scenario_id

testScenario.addActionOrCompound=\
  INSERT INTO test_sc_action(action_id,test_scenario_id,order_num) \
  VALUES(?,?,?);

testScenario.addManyActionOrCompound=\
  INSERT INTO test_sc_action(action_id,test_scenario_id,order_num) \
  SELECT unnest(?::integer[]), ?, unnest(?::integer[]);;

testScenario.checkForTestCaseOnIt=\
  SELECT CASE WHEN EXISTS ( \
  SELECT * \
  FROM test_case \
  WHERE test_scenario_id = ? \
  ) \
  THEN CAST(1 AS BOOLEAN) \
  ELSE CAST(0 AS BOOLEAN) END

testScenario.edit=\
  UPDATE test_scenario \
  SET name=?, description=?, activated=? \
  WHERE test_scenario_id=?

testScenario.dropActionOrCompound=\
  DELETE FROM test_sc_action \
  WHERE test_scenario_id = ?;


testScenario.deleteById=\
  DELETE FROM test_scenario WHERE test_scenario_id = ?;

testScenario.makeUnactivated=\
  UPDATE test_scenario \
  SET activated=false \
  WHERE test_scenario_id=?

testScenario.findById=\
  SELECT t.name, description, t.user_id, u.name user_name, u.email user_email, u.surname user_surname, t.project_id ,p.name project_name,p.link project_link, p.date project_date, t.activated  \
  FROM test_scenario t INNER JOIN usr u  ON t.user_id=u.user_id \
  INNER JOIN project p  ON t.project_id=p.project_id \
  WHERE test_scenario_id = ?;

testScenario.getComponents=\
  SELECT order_num, a.action_id, a.name, a.description ,a.type ,key ,pk.parameter_key_id \
  FROM test_sc_action ts \
  INNER JOIN action a ON ts.action_id = a.action_id \
  LEFT JOIN parameter_key pk ON a.parameter_key_id = pk.parameter_key_id \
  WHERE test_scenario_id=? \
  ORDER BY order_num



#ActionInst
actionInst.create=\
  INSERT INTO action_inst(action_id, compound_id, test_case_id, data_set_id, parameter_key_id, status, order_num)\
  VALUES(?,?,?,?,?,?,?);

actionInst.edit=\
  UPDATE action_inst SET action_id=?, compound_id=?, test_case_id=?, data_set_id=?, parameter_key_id=?, status=?, order_num=?\
  WHERE action_inst_id=?;

actionInst.findById=\
  SELECT action_inst_id, action_id, compound_id, test_case_id, data_set_id, parameter_key_id, status, order_num\
  FROM action_inst\
  WHERE action_inst_id=?

actionInst.deleteById=\
  DELETE FROM action_inst\
  WHERE action_inst_id=?;

actionInst.getAllActionInstRunDtosByTestCaseId=\
  SELECT action_inst_id, action.type action_type, parameter.value, parameter_key.key, status, result, \
  action.name action_name, data_set.name dataset_name, compound_id, compound.name compound_name, action_inst.order_num \
  FROM action_inst \
    INNER JOIN action ON action_inst.action_id=action.action_id \
    LEFT JOIN data_set ON action_inst.data_set_id = data_set.data_set_id \
    LEFT JOIN parameter ON data_set.data_set_id = parameter.data_set_id \
      AND action_inst.parameter_key_id = parameter.parameter_key_id \
    LEFT JOIN parameter_key ON action_inst.parameter_key_id = parameter_key.parameter_key_id \
    LEFT JOIN action compound ON action_inst.compound_id = compound.action_id \
  WHERE test_case_id=? \
  ORDER BY order_num;

actionInst.updateAll=\
  UPDATE action_inst set status=T.status, result=T.result \
  FROM (SELECT unnest(?::integer[]) as id, \
               unnest(?::varchar[]) as status, \
               unnest(?::varchar[]) as result) T \
  WHERE action_inst_id=T.id;

actionInst.getAllByTestCaseId=\
  SELECT action_inst_id, action_id, compound_id, test_case_id, data_set_id, a.parameter_key_id, key, status, order_num \
  FROM action_inst a JOIN parameter_key p ON a.parameter_key_id = p.parameter_key_id \
  WHERE test_case_id = ?;

notification.getUserNotifications=\
  SELECT ir.is_read, n.notification_id, n.type, n.date, tc.test_case_id, tc.name test_case_name, tc.description, tc.status, u.user_id, u.name user_name, u.surname, u.email \
  FROM is_read ir JOIN usr u on ir.user_id = u.user_id JOIN notification n on ir.notification_id = n.notification_id JOIN \
  test_case tc on n.test_case_id = tc.test_case_id WHERE u.user_id = ?;

notification.createNotification=\
  WITH n AS (\
  INSERT INTO notification (test_case_id, type) VALUES (?, ?) RETURNING notification_id, test_case_id\
  ) INSERT INTO is_read (user_id, notification_id) SELECT user_id, n.notification_id FROM n, watcher JOIN test_case tc on watcher.test_case_id = tc.test_case_id WHERE tc.test_case_id = n.test_case_id;

notification.getTestCaseWatchersId=\
  SELECT user_id FROM watcher WHERE test_case_id = ?;

notification.getTestCaseProgress=\
  SELECT tc.test_case_id id, tc.name test_case_name, tc.status status, count(*) filter ( WHERE ai.status='PASSED' )::decimal/count(*) progress \
  FROM action_inst ai JOIN test_case tc on ai.test_case_id = tc.test_case_id WHERE tc.test_case_id = ? GROUP BY id;

notification.getRunningTestCasesIdByWatcher=\
  SELECT DISTINCT w.test_case_id FROM watcher w JOIN test_case tc ON w.test_case_id = tc.test_case_id WHERE user_id = ? AND status = 'IN_PROGRESS';

notification.read=\
  UPDATE is_read SET is_read = true WHERE user_id = ? AND notification_id = ?;

notification.delete=\
  DELETE FROM is_read WHERE user_id = ? AND notification_id = ?;
