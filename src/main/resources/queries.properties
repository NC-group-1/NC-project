#parameterKey
parameterKey.create=\
  INSERT INTO parameter_key (key) VALUES (?) ON CONFLICT(key) DO NOTHING;

parameterKey.findById=\
  SELECT id, key FROM parameter_key\
  WHERE id=?

parameterKey.edit=\
  UPDATE parameter_key SET key=?\
  WHERE id=?;

parameterKey.findByName=\
  SELECT parameter_key_id, key FROM parameter_key \
  WHERE parameter_key.key LIKE CONCAT('%', ? ,'%') \
  LIMIT 5;

parameterKey.deleteById=\
  DELETE FROM parameter_key \
  WHERE id=?;

#project
project.create=\
  INSERT INTO project (name, link, user_id ) \
  VALUES (?,?,?) 

project.getAllByPage=\
  SELECT p.project_id, p.name, p.link, p.date, p.activated, u.role \
  FROM project p INNER JOIN usr u ON p.user_id=u.user_id WHERE p.name \
  LIKE ? ORDER BY %s %s LIMIT ? OFFSET ?*?

project.edit=\
  UPDATE project \
  SET name=?, link=?, activated=? \
  WHERE project_id=?

project.getSizeOfResultSet=\
  SELECT COUNT(*) FROM project \
  WHERE name LIKE ?

#user
user.create=\
  INSERT INTO usr (email, role, email_code, code_expire_date) \
  VALUES (?,?,?,?)
user.getUserIdByEmail=\
  SELECT user_id FROM usr WHERE email = ?;

user.updatePersonalProfileById=\
  UPDATE usr SET name = ?, surname = ?, about_me = ? \
  WHERE user_id = ?

user.findByEmail=\
  SELECT user_id, name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE email = ?

user.findUserProfileById=\
  SELECT user_id, name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE user_id = ?

user.getUserRoleByEmail=\
  SELECT role FROM usr WHERE email = ?

user.findByEmailForAuth=\
  SELECT email, pass, role, activated \
  FROM usr WHERE email = ?

user.findByEmailForRecovery=\
  SELECT user_id, email, email_code, code_expire_date \
  FROM usr WHERE email = ?

user.saveToken=\
  UPDATE usr SET email_code=?, code_expire_date=? \
  WHERE user_id=?

user.changeUserPassword=\
  UPDATE usr SET pass=? WHERE user_id=?

user.findUserIdByPasswordToken=\
  SELECT user_id FROM usr WHERE email_code = ?

user.findTokenByRecoverPasswordToken=\
  SELECT user_id, email_code, code_expire_date \
  FROM usr WHERE email_code = ?

user.getAllByPage=\
  SELECT user_id,name, surname, email, role, activated, image_link, reg_date, about_me \
  FROM usr WHERE name LIKE ? ORDER BY %s %s LIMIT ? OFFSET ?*?

user.updateUserFromTable=\
  UPDATE usr SET name=?, surname=?, activated=?,email=? WHERE user_id=?

user.getSizeOfResultSet=\
  SELECT COUNT(*) FROM public.usr WHERE name LIKE ?

#action
action.create=\
  INSERT INTO action (name, description, type, parameter_key_id) VALUES (?,?,?,?);

action.findNumberOfElements=\
  SELECT count(*) FROM action;

action.findAllByPage=\
  SELECT action_id, name, description, type, key, action.parameter_key_id \
  FROM action LEFT JOIN parameter_key \
  ON action.parameter_key_id = parameter_key.parameter_key_id \
  ORDER BY name LIMIT ? OFFSET ?;

action.findById=\
  SELECT action_id, name, description, type, parameter_key_id FROM action \
  WHERE action_id=?;

action.edit=\
  UPDATE action SET name=?, description=?, type=?, parameter_key_id=? \
  WHERE action_id=?;

action.findByName=\
  SELECT a.name, a.description, a.type, p.key\
  FROM action AS a \
  JOIN parameter_key AS p ON a.id = p.id \
  WHERE a.name LIKE CONCAT('%',?,'%');

action.setActionDescription=\
UPDATE action SET description =:description  WHERE id=?;

action.setActionName=\
  UPDATE action SET name=:name WHERE id=?;

action.deleteById=\
  DELETE FROM action \
  WHERE id=?;

#compound
compound.create=\
    WITH act AS ( \
    INSERT INTO action (name, description, type) \
    VALUES (?, ?, 'Compound') \
    RETURNING action_id AS comp_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT unnest(?::integer[]), comp_id, unnest(?::integer[]), unnest(?::integer[]) FROM act;

#compound.getNumberOfCompounds=\
#    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

compound.getNumberOfCompounds=\
    SELECT count(DISTINCT action.action_id) FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE lower(name) LIKE lower(concat('%',?::varchar,'%')) \
    AND lower(description) LIKE lower(concat('%',?::varchar,'%'));

compound.findAll=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id;

#compound.findByPage=\
#    SELECT DISTINCT action.action_id, name, description FROM \
#    action INNER JOIN compound_action ON action.action_id = compound_action.compound_id \
#    WHERE name LIKE concat('%',?::varchar,'%') AND description LIKE concat('%',?::varchar,'%') ORDER BY ? LIMIT ? OFFSET ?;

compound.findById=\
    SELECT DISTINCT action.action_id, name, description FROM action INNER JOIN compound_action ON action.action_id = compound_action.compound_id WHERE action.action_id = ?;

compound.edit=\
    UPDATE action SET name = ?, description = ? WHERE action_id = ?;

compound.deleteById=\
    DELETE FROM action WHERE action_id = ?;

compound.findCompoundActions=\
    SELECT action.action_id, name, description, order_num, type, parameter_key.parameter_key_id pk_id, key \
    FROM action JOIN compound_action ON action.action_id = compound_action.action_id \
    left outer join parameter_key \
    ON (CASE WHEN compound_action.parameter_key_id isnull THEN action.parameter_key_id ELSE compound_action.parameter_key_id END) = parameter_key.parameter_key_id \
    WHERE compound_id = ?;


compound.addActionToCompound=\
    WITH pk AS ( \
    INSERT INTO parameter_key (key) \
    VALUES (?) \
    RETURNING parameter_key_id AS pk_id \
    ) INSERT INTO compound_action (action_id, compound_id, order_num, parameter_key_id) \
    SELECT ?, ?, ?, pk_id from pk;

compound.addActionWithKeyNull=\
    INSERT INTO compound_action (parameter_key_id, action_id, compound_id, order_num) VALUES (?,?,?,?);

#Break up compound into actions
#compound.addActionToCompound=\
#    INSERT INTO compound_action (action_id, compound_id, order_num)
#    (SELECT DISTINCT action.action_id, ? compound_id, 0 order_num, action.parameter_key_id FROM action \
#    left outer join compound_action ON action.action_id = compound_action.action_id \
#    WHERE (CASE WHEN compound_id = ? THEN compound_id = ? ELSE (action.action_id = ? AND type != 'Compound') END));

compound.deleteActionFromCompound=\
  DELETE FROM compound_action where action_id = ? AND compound_id = ?

compound.changeOrder=\
  UPDATE compound_action SET action_id = (?::integer[])[order_num] \
  WHERE compound_id = ?;
